# PMMPのサンプルコード

- Authors  
  - [soradore](https://twitter.com/soradore_)
  - [boymelancholy](https://twitter.com/b0ymelancholy)
  - oneone
  
[コメント](#comment)

## <a name="tab-con"></a>目次
- [PHPの基本](#php-base)
- [PHPの応用](#php-app)
- [よくあるエラーと解決方法](#err-res)
- [プラグインのサンプルコード](#plugin-sample)

---

### <a name="php-base"></a>PHPの基本  

phpファイルの始まりは  
```php
<?php
```
で開始します。  

反対に終了する際は  
```
?>
```
で終了します。  
一般的にはPMMPのプラグインのようなPHPしか(HTMLなどを)記述しない場合は省略することになっています。

変数とは何かを入れるための箱と置くことができます。  
PHPでの変数は  
```php
<?php
$hoge = 1;
$huga = "aaa";
```
のように $ マークを用いて表現されます。  

PHPでは関数を定義して使うことができます。  
関数の定義には function を利用します。  
```php
<?php
function 関数名($引数){
    $引数;
}

function hoge($a){
    echo $a;
}

hoge("hoge!!");
```
関数 hoge(); を実行すると引数に渡された値が表示されます。  

引数とは関数に渡す値のことです。  
先ほど出てきた `"hoge!!"`　が引数に当たります。  
つまり関数 `hoge("hoge!!");`　を実行すると `hoge!!` と表示されるわけです。  
引数は複数渡すことができます。  
```php
<?php
function hoge2($a,$b){
    echo $a,$b;
}
hoge("hoge", "huga");
```  

<=[目次に戻る](#tab-con)  

### <a name="php-app"></a>PHPの応用  

#### 配列
ほかのプログラミング言語と同様にPHPにも型と呼ばれるものがあります。  
PHPの型は  

- Array 配列
- String 文字列
- Integer 整数
- Float 浮動小数点数
- Boolean 論理型

等があります。  

Array 配列は複数の値をいっぺんに扱うときに使用します。  
配列の作り方は  
```php
<?php

$a = [1,2,4];
```
のように `[]` で囲むことで表現します。  
すこし古い表現ですが 
```php
<?php

$a = array(1,2,4,5);
```
としても同じです。  
配列のそれぞれの値にはキーと呼ばれるものを用いてアクセスします。  
キーは配列値に順番で で自分で指定しない限り 0 から自動で当てはめられます。  
上の例では `$a[0]` には 1 が  
`$a[1]` には 2 がという風にアクセスすることができます。

PHPでは連想配列といった キーに数字だけではなく、独自の名前を付けて値を対応させる配列を使うことができます。  
```php
<?php

$a = ["aa"=>123, "bbb"=>456];
```
のように `キー => 値 ` の形で表現します。

PMMPでの主な使われ方としてPlayerを管理するために配列が用いられています。  
またPvPなどのチーム機能を実現するために配列が使われることがあります。  
以下はチームの例です。  
```php
<?php
$team['red'] = []; //赤チーム
$team['red'][] = $player;
$team['blue'] = []; //青チーム
$team['blue'][] = $player2;
```
実際にはプラグインではクラス内で使うことが多いので配列はメンバー変数で扱われます。  

#### クラス
オブジェクト指向プログラミング言語であるPHPではclassを定義することができます。  
classは何等かの目的のために変数や関数をまとめたものです。 

classの定義方法
```php

class クラス名 {

}

```
という風に書きます。

classの例
```php
class Test{
    
    public function getName(){
        return "soradore";
    }
}
```

classを実際に使用する場合には new を使用します。  
classをnewすることで __インスタンス__化します。  
```php

class Test{
    public function getName(){
        return "soradore";
    }
}

$testClass = new Test();
echo $testClass->getName(); // soradore　と表示されます。
```

classには特別な名前の関数を定義することができます。
コンストラクタはインスタンス化に際してインスタンスに変数を渡したいときに使用できます。

コンストラクタの例  
```php
class Test{
 
    public $name, $number;
    public function __construct($name, $number){ //コンストラクタ
        $this->name = $name; //public $name で定義したメンバ変数に コンストラクタで受け取った $nameを受け取る
        $this->number = $number; //public $number で定義したメンバ変数に コンストラクタで受け取った $numberを受け取る
    }
    
    public function getName(){
        return $this->name;
    }
    
    public function getNumber(){
        return $this->number;
    }
}

$testClass = new Test("soradore", 1111);
/*                    ↑コンストラクタに値を渡す */
```
class内部で自分のインスタンスを指すときには $this を使用します。  

```php
$this->変数名;
```
でクラス内の変数であるメンバ変数にアクセスできます。  
  
  
### <a name="err-res"></a>よくあるエラーと解決方法  

#### ケース1

```
[Server thread/CRITICAL]: ParseError: "syntax error, unexpected end of file, expecting function (T_FUNCTION) or const (T_CONST)" (EXCEPTION) in "plugins/~/src/soradore/~/main" at line ○○
```
エラー原因 : }が閉じ忘れていた  

解決方法 :  
 {} のペアを確認する。  
 インデントを行う。  
 高機能テキストエディタを使うと自動でつけてくれるものもあるので、活用しましょう。

#### ケース2

文法的には間違っていないのになぜかエラーが出る!! というときには  
空白文字に全角スペースが入っているかもしれません。テキストエディタの検索で全角スペースを入力して検索してみましょう。  
メッセージなどで日本語を入力したあと半角に戻し忘れていることがあります。日本語入力の周りを注意してみましょう。  
またファイルを保存する際に文字コードの指定はBOMなしのUTF-8Nを選択しましょう。  
BOMありにしてしまうと、同様にエラーの原因になりえます。
他にも文字列の ' や " を　’ や ”　にしてしまったりしているとエラーになります。

#### ケース3

```
PHP Fatal error:  Uncaught Error: Call to a member function function() on null in "/~/~/main" at line ○○
```
エラー原因 : Nullに対して関数を呼び出していた。
例として
```php
$player->getName();
//表向きはこうだが中身は実は
(NULL)->getName();
```
となっていた場合、NULLなのに関数呼び出せないよ!!!ということでエラーが出てしまいます。

### <a name="plugin-sample"></a>プラグインのサンプルコード

#### プレイヤー関連
```php
use pocketmine\Server;

// プレイヤーの取得
$player = Server::getInstance()->getPlayer("名前");

// プレイヤーの名前取得
$name = $player->getName();

// プレイヤーの頭上の名前を取得
$nametag = $player->getNameTag();

// プレイヤーの頭上の名前を設定
$player->setNameTag("wwww");

// プレイヤーリスト(ポーズ画面等にでる)に表示される名前
$displayname = $player->getDisplayName();

// ↑を設定
$player->setDisplayName("wwww");

// 方向 (0=南,1=西,2=北,3=東) 取得
$player->getDirection();

// 位置の取得
$pos = $player->getPosition();
$x = $pos->x; // X座標
$y = $pos->y; // Y座標
$z = $pos->z; // Z座標

// OP権限を付与する
$player->setOp(true);

// OP権限の剥奪
$player->setOp(false);

// ホワイトリストに追加
$player->setWhitelisted(true);

// ホワイトリストから削除
$player->setWhitelisted(false);

// オートジャンプを可能にする
$player->setAutoJump(true);

// ゲームモード変更
$player->setGamemode("数値");
// 0 = サバイバル, 1 = クリエイティブ, 2 = アドベンチャー, 3 = スペクテーター

// サバイバルでも飛べるようにする
$player->setAllowFlight(true);

// $amount秒 燃やします
$player->setOnFire($amount);

// プレイヤーを殺す
$player->kill();

// テレポート
use pocketmine\math\Vector3;
use pocketmine\level\Position;
use pocketmine\level\Location;

$pos = new Vector3(/*X座標*/, /*Y座標*/, /*Z座標*/); // 座標のみ
$pos = new Position(/*X座標*/, /*Y座標*/, /*Z座標*/, /*Level*/); // ワールドも考慮
$pos = new Location(/*X座標*/, /*Y座標*/, /*Z座標*/, /*Yaw*/, /*Pitch*/, /*Level*/); // 体頭の向きも考慮
$player->teleport($pos);

// ジャンプさせる
$motionJ = new Vector3(0,0,0); // 初期座標
$jump = 0.8; // 高さ
$motionJ->y = $jump;
$player->setMotion($motionJ);

// IP BAN
$this>getServer()->getIPBans()->addBan("IPアドレス", "理由", null, "BANした人の名前");

// IP BAN解除
$this>getServer()->getIPBans()->remove($player);

// 名前BAN
$this>getServer()->getNameBans()->addBan($player, "理由", null, "BANした人の名前");

// 名前BAN解除
$this>getServer()->getNameBans()->remove($player);

// Kick
$player->kick("理由", true); // trueをfalseにすると"Kicked by Admin"が消えます

// Effect付与
use pocketmine\entity\Effect;
use pocketmine\entity\EffectInstance;

$effect = Effect::getEffect(/*EffectID*/);
$duration = 100; // 時間
$amplification = 1; // 効果度合
$visible = false; // エフェクトのモヤモヤが見えるかどうか
$instance = new EffectInstance($effect, $duration, $amplification, $visible);
$player->addEffect($instance);

// ()に入っているIDのエフェクトを持っているか
if ($player->hasEffect(1)) {
    //持っている
} else {
    //持っていない
}
```

#### エンティティ関係
```php
// $entityはEntityオブジェクトであるとします。

// エンティティが追いかけてくるコード
$entity->lookAt($player);
$moveX = sin(-deg2rad($entity->yaw)) * 0.5; //0.5はスピード
$moveZ = cos(-deg2rad($entity->yaw)) * 0.5;
$entity->move($moveX, 0, $moveZ);

// 見ているブロックを取得
$block = $entity->getTargetBlock(/*距離*/);

// 大きさ変更
$entity->setScale(/*0より大きい数値*/);

// 操作不能、停止させる
$entity->setImmobile(true);

// ↑ 解除
$entity->setImmobile(false);
```

#### Config関係
```php
use pocketmine\utils\Config;

// ResourcesフォルダからConfig保存
$this->reloadConfig(); // Configファイルを再読み込み

if(!file_exists($this->getDataFolder())){ //Configファイルを入れるフォルダがあるかを確認
    @mkdir($this->getDataFolder(), 0744, true); // なければフォルダを作成
}

//何も書かれていないConfigの作成
//$this->getDataFolder() はプラグインのパスを意味します
new Config($this->getDataFolder() . "config.yml", Config::YAML);

//キーが設定されているConfigの作成
new Config($this->getDataFolder() . "config.yml", Config::YAML,
    [
        'test' => 'data',
        'データ名(キー)' => '値'
    ]
);

// Configの取得
$this->config = new Config($this->getDataFolder() . "config.yml", Config::YAML);

// Configの種類リスト
new Config($this->getDataFolder() . "config.properties", Config::PROPERTIES);
new Config($this->getDataFolder() . "config.cnf", Config::CNF);
new Config($this->getDataFolder() . "config.json", Config::JSON);
new Config($this->getDataFolder() . "config.yaml", Config::YAML);
new Config($this->getDataFolder() . "config.serialize", Config::SERIALIZED);
new Config($this->getDataFolder() . "config.enum", Config::ENUM);

 // データ名から値を取得
$this->config->get("データ名");

// データをすべて取得
$this->config->getAll();

// Configから項目の有無確認
if ($this->config->exists("データ名")) {
    //ある場合
} else {
    //ない場合
}

// Configにデータをセット
$this->config->set("データ名", "値"); // 値と名前を設定
$this->config->save();

// test という項目をコンフィグから消す場合
$this->config->remove("test");
$this->config->save(); // 保存

// Config内の配列をマージする
// 配列 test 内の 'a' を 'b' にする場合
$data = $this->config->get("test"); // test項目を取得
$data2 = array("a" => "b"); // マージする内容を設定
$merge = array_merge($data, $data2) // マージする
$this->config->set("test", $merge); // コンフィグにセット
```

#### Scheduler関係
```php
// $plugin は PluginBaseであるとします

// クロージャ―タスクで簡易記述 (RepeatingTask)
use pocketmine\scheduler\ClosureTask;

$player; // プレイヤーオブジェクト
$plugin->getScheduler()->scheduleRepeatingTask(
    new ClosureTask(
        function(int $currentTick) use($player): void {
            // リピートする処理
            // 例: メッセージ送信
            $player->sendMessage("繰り返してます");
        }
    ),
    1 * 20
);
```

<a name="comment"></a>
